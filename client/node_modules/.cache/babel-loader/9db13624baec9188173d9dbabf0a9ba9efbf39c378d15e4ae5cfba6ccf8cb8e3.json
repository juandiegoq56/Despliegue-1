{"ast":null,"code":"var _s = $RefreshSig$();\nfunction parseJwt(token) {\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nlet isLogged = parseJwt(localStorage.getItem('token')).exp * 1000 > Date.now();\nexport default function useUser() {\n  _s();\n  const login = useCallback(async () => {\n    try {\n      // Comparar los datos con las credenciales proporcionadas\n\n      const match = isLogged;\n      if (match) {\n        // Iniciar sesi칩n actualizando el estado del JWT en el contexto \n        console.log(match);\n      } else {\n        alert('Credenciales inv치lidas');\n      }\n    } catch (error) {\n      console.error('Error al obtener los datos:', error);\n    }\n  });\n  return {\n    isLogged,\n    login\n  };\n}\n_s(useUser, \"RFPxj+ckhI5oaKb5TS5jmPMDF9c=\");","map":{"version":3,"names":["parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","isLogged","localStorage","getItem","exp","Date","now","useUser","_s","login","useCallback","match","console","log","alert","error"],"sources":["/home/juan/Desktop/Proyectos/Login jwt/client/src/components/useUser.js"],"sourcesContent":["function parseJwt (token) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n}\nlet isLogged = (parseJwt(localStorage.getItem('token')).exp * 1000 > Date.now());\n\nexport default function useUser() {\n\nconst login = useCallback(async () => {\n    try {\n     \n      // Comparar los datos con las credenciales proporcionadas\n     \n      const match = isLogged\n      \n     if(match)\n      {\n        // Iniciar sesi칩n actualizando el estado del JWT en el contexto \n        console.log(match)\n        \n      }\n      else {\n        alert('Credenciales inv치lidas');\n      }\n      \n      \n\n    } catch (error) {\n      console.error('Error al obtener los datos:', error);\n    }\n  });\n  return {\n    isLogged,\n    login,\n    \n  };\n}\n\n"],"mappings":";AAAA,SAASA,QAAQA,CAAEC,KAAK,EAAE;EACtB,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACO,GAAG,CAAC,UAASC,CAAC,EAAE;IACjF,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAEZ,OAAOC,IAAI,CAACC,KAAK,CAACX,WAAW,CAAC;AAClC;AACA,IAAIY,QAAQ,GAAIlB,QAAQ,CAACmB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAE;AAEhF,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAElC,MAAMC,KAAK,GAAGC,WAAW,CAAC,YAAY;IAClC,IAAI;MAEF;;MAEA,MAAMC,KAAK,GAAGV,QAAQ;MAEvB,IAAGU,KAAK,EACP;QACE;QACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAEpB,CAAC,MACI;QACHG,KAAK,CAAC,wBAAwB,CAAC;MACjC;IAIF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,CAAC;EACF,OAAO;IACLd,QAAQ;IACRQ;EAEF,CAAC;AACH;AAACD,EAAA,CA9BuBD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}