{"ast":null,"code":"function parseJwt(token) {\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nconst useTokenValidation = async () => {\n  let isLogged = false;\n  let nombreCompleto = '';\n  let Nombre = '';\n  let isAdmin = false; // Variable para almacenar si el usuario es administrador\n  if (localStorage.getItem('token') === null) {\n    isLogged = false;\n  } else if (parseJwt(localStorage.getItem('token')).exp * 1000 > Date.now()) {\n    isLogged = true;\n    const payload = parseJwt(localStorage.getItem('token'));\n    nombreCompleto = payload.nombreCompleto;\n    Nombre = payload.username;\n\n    // Llamar a la API para verificar si el usuario es administrador\n    try {\n      const response = await fetch(`http://localhost:3001/admin${Nombre}`);\n      if (response.ok) {\n        const usuario = await response.json();\n        isAdmin = usuario.tipo_admin === 1; // Comparación para determinar si es administrador\n      } else {\n        console.error('Error al obtener el usuario de la base de datos');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud a la API:', error);\n    }\n  } else {\n    localStorage.removeItem('token');\n    localStorage.removeItem('Nombre');\n    isLogged = false;\n  }\n  return {\n    isLogged,\n    nombreCompleto,\n    isAdmin\n  }; // Retornar un objeto con los valores\n};\nexport default useTokenValidation;","map":{"version":3,"names":["parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","useTokenValidation","isLogged","nombreCompleto","Nombre","isAdmin","localStorage","getItem","exp","Date","now","payload","username","response","fetch","ok","usuario","json","tipo_admin","console","error","removeItem"],"sources":["/home/manuel/Descargas/azteca/Despliegue-1/client/src/components/useUser.js"],"sourcesContent":["function parseJwt(token) {\r\n  const base64Url = token.split('.')[1];\r\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\r\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n  }).join(''));\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst useTokenValidation = async () => {\r\n  let isLogged = false;\r\n  let nombreCompleto = '';\r\n  let Nombre = '';\r\n  let isAdmin = false; // Variable para almacenar si el usuario es administrador\r\n  if (localStorage.getItem('token') === null) {\r\n    isLogged = false;\r\n  } else if (parseJwt(localStorage.getItem('token')).exp * 1000 > Date.now()) {\r\n    isLogged = true;\r\n    const payload = parseJwt(localStorage.getItem('token'));\r\n    nombreCompleto = payload.nombreCompleto;\r\n    Nombre = payload.username;\r\n\r\n    // Llamar a la API para verificar si el usuario es administrador\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/admin${Nombre}`);\r\n      if (response.ok) {\r\n        const usuario = await response.json();\r\n        isAdmin = usuario.tipo_admin === 1; // Comparación para determinar si es administrador\r\n      } else {\r\n        console.error('Error al obtener el usuario de la base de datos');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud a la API:', error);\r\n    }\r\n  } else {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('Nombre');\r\n    isLogged = false;\r\n  }\r\n  return { isLogged, nombreCompleto, isAdmin }; // Retornar un objeto con los valores\r\n}\r\n\r\nexport default useTokenValidation;\r\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,KAAK,EAAE;EACvB,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACO,GAAG,CAAC,UAASC,CAAC,EAAE;IACnF,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9D,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAEZ,OAAOC,IAAI,CAACC,KAAK,CAACX,WAAW,CAAC;AAChC;AAEA,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,cAAc,GAAG,EAAE;EACvB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,OAAO,GAAG,KAAK,CAAC,CAAC;EACrB,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;IAC1CL,QAAQ,GAAG,KAAK;EAClB,CAAC,MAAM,IAAInB,QAAQ,CAACuB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAC1ER,QAAQ,GAAG,IAAI;IACf,MAAMS,OAAO,GAAG5B,QAAQ,CAACuB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvDJ,cAAc,GAAGQ,OAAO,CAACR,cAAc;IACvCC,MAAM,GAAGO,OAAO,CAACC,QAAQ;;IAEzB;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BV,MAAO,EAAC,CAAC;MACpE,IAAIS,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACrCZ,OAAO,GAAGW,OAAO,CAACE,UAAU,KAAK,CAAC,CAAC,CAAC;MACtC,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAC;MAClE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAClE;EACF,CAAC,MAAM;IACLd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChCf,YAAY,CAACe,UAAU,CAAC,QAAQ,CAAC;IACjCnB,QAAQ,GAAG,KAAK;EAClB;EACA,OAAO;IAAEA,QAAQ;IAAEC,cAAc;IAAEE;EAAQ,CAAC,CAAC,CAAC;AAChD,CAAC;AAED,eAAeJ,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}