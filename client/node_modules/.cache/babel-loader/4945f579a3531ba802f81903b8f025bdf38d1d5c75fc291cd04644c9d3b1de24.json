{"ast":null,"code":"import axios from 'axios';\nconst response = await axios.get('http://localhost:3001/usuarios');\nconst apps = response.data;\n\n// Formatear la propiedad 'imagen' de cada elemento en 'apps'\napps.forEach(async app => {\n  if (app.imagen instanceof Blob) {\n    const blobUrl = URL.createObjectURL(app.imagen); // Crear una URL del Blob\n    const base64String = await blobToBase64(blobUrl); // Convertir la URL base64\n    app.imagen = base64String; // Asignar la cadena base64 a la propiedad 'imagen'\n  }\n});\n\n// Función para convertir una URL base64 a una cadena base64\nfunction blobToBase64(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      const reader = new FileReader();\n      reader.onloadend = function () {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(xhr.response);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n    xhr.send();\n  });\n}\nexport default apps;","map":{"version":3,"names":["axios","response","get","apps","data","forEach","app","imagen","Blob","blobUrl","URL","createObjectURL","base64String","blobToBase64","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","reader","FileReader","onloadend","result","split","onerror","readAsDataURL","open","responseType","send"],"sources":["C:/Users/judqu/OneDrive/Escritorio/azteca/Despliegue-1/client/src/Vistas/Apps.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst response = await axios.get('http://localhost:3001/usuarios');\r\nconst apps = response.data;\r\n\r\n// Formatear la propiedad 'imagen' de cada elemento en 'apps'\r\napps.forEach(async app => {\r\n  if (app.imagen instanceof Blob) {\r\n    const blobUrl = URL.createObjectURL(app.imagen); // Crear una URL del Blob\r\n    const base64String = await blobToBase64(blobUrl); // Convertir la URL base64\r\n    app.imagen = base64String; // Asignar la cadena base64 a la propiedad 'imagen'\r\n  }\r\n});\r\n\r\n// Función para convertir una URL base64 a una cadena base64\r\nfunction blobToBase64(url) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = function () {\r\n      const reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        resolve(reader.result.split(',')[1]);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(xhr.response);\r\n    };\r\n    xhr.onerror = reject;\r\n    xhr.open('GET', url);\r\n    xhr.responseType = 'blob';\r\n    xhr.send();\r\n  });\r\n}\r\n\r\nexport default apps;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,MAAMD,KAAK,CAACE,GAAG,CAAC,gCAAgC,CAAC;AAClE,MAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAI;;AAE1B;AACAD,IAAI,CAACE,OAAO,CAAC,MAAMC,GAAG,IAAI;EACxB,IAAIA,GAAG,CAACC,MAAM,YAAYC,IAAI,EAAE;IAC9B,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;IACjD,MAAMK,YAAY,GAAG,MAAMC,YAAY,CAACJ,OAAO,CAAC,CAAC,CAAC;IAClDH,GAAG,CAACC,MAAM,GAAGK,YAAY,CAAC,CAAC;EAC7B;AACF,CAAC,CAAC;;AAEF;AACA,SAASC,YAAYA,CAACC,GAAG,EAAE;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;IAChCD,GAAG,CAACE,MAAM,GAAG,YAAY;MACvB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,YAAY;QAC7BP,OAAO,CAACK,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC,CAAC;MACDJ,MAAM,CAACK,OAAO,GAAGT,MAAM;MACvBI,MAAM,CAACM,aAAa,CAACT,GAAG,CAACjB,QAAQ,CAAC;IACpC,CAAC;IACDiB,GAAG,CAACQ,OAAO,GAAGT,MAAM;IACpBC,GAAG,CAACU,IAAI,CAAC,KAAK,EAAEd,GAAG,CAAC;IACpBI,GAAG,CAACW,YAAY,GAAG,MAAM;IACzBX,GAAG,CAACY,IAAI,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ;AAEA,eAAe3B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}