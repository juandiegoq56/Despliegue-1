{"ast":null,"code":"import axios from 'axios';\nconst fetchApps = async () => {\n  try {\n    const response = await axios.get('http://localhost:3001/usuarios');\n    const appsData = response.data;\n\n    // Convertir las imágenes a formato base64\n    const appsWithBase64Images = appsData.map(app => {\n      const base64Image = arrayBufferToBase64(app.imagen.data); // Función para convertir el array de bytes en base64\n      return {\n        ...app,\n        imagen: base64Image\n      };\n    });\n    return appsWithBase64Images;\n  } catch (error) {\n    console.error('Error al obtener las aplicaciones:', error);\n    return [];\n  }\n};\n\n// Función para convertir un array de bytes en formato base64\nconst arrayBufferToBase64 = buffer => {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n};\nconst apps = await fetchApps();\nexport default apps;","map":{"version":3,"names":["axios","fetchApps","response","get","appsData","data","appsWithBase64Images","map","app","base64Image","arrayBufferToBase64","imagen","error","console","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","apps"],"sources":["C:/Users/judqu/OneDrive/Escritorio/azteca/Despliegue-1/client/src/Vistas/Apps.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst fetchApps = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:3001/usuarios');\r\n    const appsData = response.data;\r\n\r\n    // Convertir las imágenes a formato base64\r\n    const appsWithBase64Images = appsData.map(app => {\r\n      const base64Image = arrayBufferToBase64(app.imagen.data); // Función para convertir el array de bytes en base64\r\n      return { ...app, imagen: base64Image };\r\n    });\r\n\r\n    return appsWithBase64Images;\r\n  } catch (error) {\r\n    console.error('Error al obtener las aplicaciones:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Función para convertir un array de bytes en formato base64\r\nconst arrayBufferToBase64 = buffer => {\r\n  let binary = '';\r\n  const bytes = new Uint8Array(buffer);\r\n  const len = bytes.byteLength;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n\r\n  return btoa(binary);\r\n};\r\n\r\nconst apps = await fetchApps();\r\n\r\nexport default apps;\r\n\r\n    "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,gCAAgC,CAAC;IAClE,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI;;IAE9B;IACA,MAAMC,oBAAoB,GAAGF,QAAQ,CAACG,GAAG,CAACC,GAAG,IAAI;MAC/C,MAAMC,WAAW,GAAGC,mBAAmB,CAACF,GAAG,CAACG,MAAM,CAACN,IAAI,CAAC,CAAC,CAAC;MAC1D,OAAO;QAAE,GAAGG,GAAG;QAAEG,MAAM,EAAEF;MAAY,CAAC;IACxC,CAAC,CAAC;IAEF,OAAOH,oBAAoB;EAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAMF,mBAAmB,GAAGI,MAAM,IAAI;EACpC,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACpC,MAAMI,GAAG,GAAGF,KAAK,CAACG,UAAU;EAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5BL,MAAM,IAAIM,MAAM,CAACC,YAAY,CAACN,KAAK,CAACI,CAAC,CAAC,CAAC;EACzC;EAEA,OAAOG,IAAI,CAACR,MAAM,CAAC;AACrB,CAAC;AAED,MAAMS,IAAI,GAAG,MAAMvB,SAAS,CAAC,CAAC;AAE9B,eAAeuB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}